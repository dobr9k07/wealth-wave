"use client";

import * as React from "react";
import { useMediaQuery } from "@/hooks/use-media-query";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { Drawer, DrawerContent, DrawerTrigger } from "@/components/ui/drawer";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Currencies, Currency } from "@/lib/currencies"; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –≤–∞–ª—é—Ç–∏
import { useMutation, useQuery } from "@tanstack/react-query"; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ö—É–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–º–∏
import SceletonWrapper from "./SkeletonWrapper"; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±–≥–æ—Ä—Ç–∫–∏ —Å–∫–µ–ª–µ—Ç—É
import { UserSettings } from "@prisma/client"; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–∏–ø–∏ –∑ Prisma
// import { UpdateUserCurrency } from "@/app/wizard/_actions/userSettings"; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
import { toast } from "sonner"; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
import { UpdateUserCurrency } from "@/app/[locale]/wizard/_actions/userSettings";

export function CurrencyComboBox() {
  const [open, setOpen] = React.useState(false); // –°—Ç–∞–Ω –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Å–ø–ª–∏–≤–∞—é—á–æ–≥–æ –≤—ñ–∫–Ω–∞ –∞–±–æ –ø–∞–Ω–µ–ª—ñ
  const isDesktop = useMediaQuery("(min-width: 768px)"); // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø—ñ
  const [selectedOption, setSelectedOption] = React.useState<Currency | null>(
    null
  ); // –°—Ç–∞–Ω –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–æ—ó –≤–∞–ª—é—Ç–∏

  // –ó–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const userSettings = useQuery<UserSettings>({
    queryKey: ["userSettings"],
    queryFn: () => fetch("/api/user-settings").then((res) => res.json()),
  });

  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (–≥—Ä–∏–≤–Ω—è)
  React.useEffect(() => {
    if (!userSettings.data) return;
    const userCurrency = Currencies.find(
      (currency) => currency.value === userSettings.data.currency
    );
    if (userCurrency) setSelectedOption(userCurrency);
  }, [userSettings.data]);

  // –ú—É—Ç–∞—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∞–ª—é—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const mutation = useMutation({
    mutationFn: UpdateUserCurrency,
    onSuccess: (data: UserSettings) => {
      toast.success(`Currency updated successfully üéâ`, {
        id: "update-currency",
      });

      setSelectedOption(
        Currencies.find((c) => c.value === data.currency) || null
      );
    },
    onError: (e) => {
      console.error(e);
      toast.error("Something went wrong", {
        id: "update-currency",
      });
    },
  });

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É –æ–ø—Ü—ñ—ó
  const selectOption = React.useCallback(
    (currency: Currency | null) => {
      if (!currency) {
        toast.error("Please select a currency");
        return;
      }

      toast.loading("Updating currency...", {
        id: "update-currency",
      });

      mutation.mutate(currency.value);
    },
    [mutation]
  );

  // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø—É
  if (isDesktop) {
    return (
      <SceletonWrapper isLoading={userSettings.isFetching}>
        <Popover open={open} onOpenChange={setOpen}>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              className="w-[150px] justify-start"
              disabled={mutation.isPending}
            >
              {selectedOption ? <>{selectedOption.label}</> : <>Set currency</>}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[200px] p-0" align="start">
            <OptionList setOpen={setOpen} setSelectedOption={selectOption} />
          </PopoverContent>
        </Popover>
      </SceletonWrapper>
    );
  }

  // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
  return (
    <SceletonWrapper isLoading={userSettings.isFetching}>
      <Drawer open={open} onOpenChange={setOpen}>
        <DrawerTrigger asChild>
          <Button
            variant="outline"
            className="w-[150px] justify-start"
            disabled={mutation.isPending}
          >
            {selectedOption ? <>{selectedOption.label}</> : <>Set currency</>}
          </Button>
        </DrawerTrigger>
        <DrawerContent>
          <div className="mt-4 border-t">
            <OptionList setOpen={setOpen} setSelectedOption={selectOption} />
          </div>
        </DrawerContent>
      </Drawer>
    </SceletonWrapper>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–ø–∏—Å–∫—É –æ–ø—Ü—ñ–π
function OptionList({
  setOpen,
  setSelectedOption,
}: {
  setOpen: (open: boolean) => void;
  setSelectedOption: (status: Currency | null) => void;
}) {
  return (
    <Command>
      <CommandInput placeholder="Filter currency..." />
      <CommandList>
        <CommandEmpty>No results found.</CommandEmpty>
        <CommandGroup>
          {Currencies.map((currency: Currency) => (
            <CommandItem
              key={currency.value}
              value={currency.value}
              onSelect={(value) => {
                setSelectedOption(
                  Currencies.find((priority) => priority.value === value) ||
                    null
                );
                setOpen(false);
              }}
            >
              {currency.label}
            </CommandItem>
          ))}
        </CommandGroup>
      </CommandList>
    </Command>
  );
}
